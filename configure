#!/bin/sh

BUILD_TREE=`/bin/pwd`
SOURCE_TREE=`dirname $0`
SOURCE_TREE=`cd "$SOURCE_TREE"; /bin/pwd`

INSTALL_PREFIX=
INSTALL_LIBS=
INSTALL_BINS=
INSTALL_HEADERS=
INSTALL_FEATURES=

BUILD_EXAMPLES=yes
BUILD_TESTS=yes

BUILD_UCHARDET=auto
BUILD_ICU=auto

QMAKE_CONFIG=
QMAKE_PARAMS=
QMAKE_DEBUG=
QMAKE_SPEC=
OPT_HELP=no

QMAKE=`which qmake || which qmake-qt4` 2>/dev/null

#-------------------------------------------------------------------------------
# parse command line arguments
#-------------------------------------------------------------------------------

# parse the arguments, setting things to "yes" or "no"
while [ "$#" -gt 0 ]; do
    CURRENT_OPT="$1"
    UNKNOWN_ARG=no
    case "$1" in
    #Autoconf style options
    --enable-*)
        VAR=`echo $1 | sed "s,^--enable-\(.*\),\1,"`
        VAL=yes
        ;;
    --disable-*)
        VAR=`echo $1 | sed "s,^--disable-\(.*\),\1,"`
        VAL=no
        ;;
    --*=*)
        VAR=`echo $1 | sed "s,^--\(.*\)=.*,\1,"`
        VAL=`echo $1 | sed "s,^--.*=\(.*\),\1,"`
        ;;
    --no-*)
        VAR=`echo $1 | sed "s,^--no-\(.*\),\1,"`
        VAL=no
        ;;
    --*)
        VAR=`echo $1 | sed "s,^--\(.*\),\1,"`
        VAL=yes
        ;;
    #Qt style options that pass an argument
    -prefix|-libdir|-bindir|-headerdir|-featuredir)
        VAR=`echo $1 | sed "s,^-\(.*\),\1,"`
        shift
        VAL="$1"
        ;;
    #Qt style no options
    -no-*)
        VAR=`echo $1 | sed 's,^-no-\(.*\),\1,'`
        VAL=no
        ;;
    #Qt style yes options
    -uchardet|-icu|-static)
        VAR=`echo $1 | sed 's,^-\(.*\),\1,'`
        VAL=yes
        ;;
    -*)
        VAR=`echo $1 | sed 's,^-\(.*\),\1,'`
        VAL=unknown
        ;;
    *)
        UNKNOWN_ARG=yes
        ;;
    esac
    if [ "$UNKNOWN_ARG" = "yes" ]; then
        echo "$1: unknown argument"
        OPT_HELP=yes
        ERROR=yes
        shift
        continue
    fi
    shift

    UNKNOWN_OPT=no
    case "$VAR" in
    prefix)
        INSTALL_PREFIX="$VAL"
        ;;
    libdir)
        INSTALL_LIBS="$VAL"
        ;;
    bindir)
        INSTALL_BINS="$VAL"
        ;;
    headerdir)
        INSTALL_HEADERS="$VAL"
        ;;
    featuredir)
        INSTALL_FEATURES="$VAL"
        ;;
    nomake)
        case "$1" in
        examples)
            BUILD_EXAMPLES=no
            shift
            ;;
        tests)
            BUILD_TESTS=no
            shift
            ;;
        *)
            CURRENT_OPT="$1"
            UNKNOWN_OPT=yes
            ;;
        esac
        ;;
    make)
        case "$1" in
        examples)
            BUILD_EXAMPLES=yes
            ;;
        tests)
            BUILD_TESTS=yes
            ;;
        *)
            CURRENT_OPT="$1"
            UNKNOWN_OPT=yes
            ;;
        esac
        shift
        ;;
    static)
        QMAKE_CONFIG="$QMAKE_CONFIG static"
        ;;
    qmake)
        QMAKE="$1"
        shift
        ;;
    spec)
        QMAKE_SPEC="$1"
        shift
        ;;
    config)
        QMAKE_CONFIG="$QMAKE_CONFIG $1"
        shift
        ;;
    d)
        QMAKE_DEBUG="$QMAKE_DEBUG -d"
        ;;
    uchardet)
        if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
            BUILD_UCHARDET=$VAL
        else
            UNKNOWN_OPT=yes
        fi
        ;;
    icu)
        if [ "$VAL" = "yes" ] || [ "$VAL" = "no" ]; then
            BUILD_ICU=$VAL
        else
            UNKNOWN_OPT=yes
        fi
        ;;
    h|help)
        OPT_HELP=yes
        ;;
    *)
        UNKNOWN_OPT=yes
        ;;
    esac
    if [ "$UNKNOWN_OPT" = "yes" ]; then
        echo "${CURRENT_OPT}: unknown option"
        OPT_HELP=yes
        ERROR=yes
    fi
done

if [ "$OPT_HELP" = "yes" ]; then
    cat << EOF
Usage:  configure [options]

Installation options:

    -prefix <dir> ............ The installation prefix
    -libdir <dir> ............ Libraries will be installed to <dir>
                               (default QT_INSTALL_LIBS)
    -bindir <dir> ............ Binaries will be installed to <dir>
                               (default QT_INSTALL_BINS)
    -headerdir <dir> ......... Headers will be installed to <dir>
                               (default QT_INSTALL_HEADERS/Communi)
    -featuredir <dir> ........ Features will be installed to <dir>
                               (default QT_INSTALL_DATA/mkspecs/features)

Configure options:

    -static .................. Build static library
    -qmake ................... qmake to use
    -config (config) ......... Additional configuration options recognized by qmake
    -make (part) ............. Add part to the list of parts to be built at
                               make time (available parts: examples tests)
    -nomake (part) ........... Exclude part from the list of parts to be built

Additional options:

    -no-uchardet ............. Do not build uchardet support
    -uchardet ................ Build uchardet support

    -no-icu .................. Do not build ICU support
    -icu ..................... Build ICU support

EOF
    [ "x$ERROR" = "xyes" ] && exit 1
    exit 0
fi

if [ ! -f "$QMAKE" ]; then
    echo "ERROR: Unable to find qmake. Try $0 -qmake /path/to/qmake."
    exit 1
fi

if [ "$INSTALL_PREFIX" != "" ]; then
    [ "$INSTALL_LIBS" = "" ] && INSTALL_LIBS="$INSTALL_PREFIX/lib"
    [ "$INSTALL_BINS" = "" ] && INSTALL_BINS="$INSTALL_PREFIX/bin"
    [ "$INSTALL_HEADERS" = "" ] && INSTALL_HEADERS="$INSTALL_PREFIX/include"
    [ "$INSTALL_FEATURES" = "" ] && INSTALL_FEATURES="$INSTALL_PREFIX/features"
fi
[ "$INSTALL_LIBS" != "" ] && QMAKE_PARAMS="$QMAKE_PARAMS COMMUNI_INSTALL_LIBS=$INSTALL_LIBS"
[ "$INSTALL_BINS" != "" ] && QMAKE_PARAMS="$QMAKE_PARAMS COMMUNI_INSTALL_BINS=$INSTALL_BINS"
[ "$INSTALL_HEADERS" != "" ] && QMAKE_PARAMS="$QMAKE_PARAMS COMMUNI_INSTALL_HEADERS=$INSTALL_HEADERS"
[ "$INSTALL_FEATURES" != "" ] && QMAKE_PARAMS="$QMAKE_PARAMS COMMUNI_INSTALL_FEATURES=$INSTALL_FEATURES"

[ "$INSTALL_LIBS" = "" ] && INSTALL_LIBS=`$QMAKE -query QT_INSTALL_LIBS`
[ "$INSTALL_BINS" = "" ] && INSTALL_BINS=`$QMAKE -query QT_INSTALL_BINS`
[ "$INSTALL_HEADERS" = "" ] && INSTALL_HEADERS=`$QMAKE -query QT_INSTALL_HEADERS`/Communi
[ "$INSTALL_FEATURES" = "" ] && INSTALL_FEATURES=`$QMAKE -query QT_INSTALL_DATA`/mkspecs/features

[ "$BUILD_EXAMPLES" = "no" ] && QMAKE_PARAMS="$QMAKE_PARAMS -config no_examples"
[ "$BUILD_TESTS" = "no" ] && QMAKE_PARAMS="$QMAKE_PARAMS -config no_tests"

[ "$BUILD_UCHARDET" = "no" ] && QMAKE_PARAMS="$QMAKE_PARAMS -config no_uchardet"
[ "$BUILD_ICU" = "no" ] && QMAKE_PARAMS="$QMAKE_PARAMS -config no_icu"

[ "$QMAKE_SPEC" != "" ] && QMAKE_SPEC="-spec $QMAKE_SPEC"

echo
echo "Running $QMAKE $QMAKE_SPEC..."

$QMAKE $QMAKE_SPEC $QMAKE_DEBUG $QMAKE_PARAMS "CONFIG+=$QMAKE_CONFIG" -r $SOURCE_TREE/communi.pro
if [ $? != 0 ]; then
    echo "ERROR: qmake run failed."
    exit 1
fi

echo
echo "Communi build configuration:"
if [ "$QMAKE_CONFIG" != "" ]; then
    echo "Configuration ...................$QMAKE_CONFIG"
fi
echo "uchardet support ................ $BUILD_UCHARDET"
echo "ICU support ..................... $BUILD_ICU"
echo "Examples ........................ $BUILD_EXAMPLES"
echo "Tests ........................... $BUILD_TESTS"
echo
echo "Install libs .................... $INSTALL_LIBS"
#echo "Install binaries ................ $INSTALL_BINS"
echo "Install headers ................. $INSTALL_HEADERS"
echo "Install features ................ $INSTALL_FEATURES"
echo
echo Communi is now configured for building. Just run \'make\'.
echo
